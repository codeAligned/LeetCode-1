# 17. Letter Combinations of a Phone Number
# Time: O(4^N)
# Space: O(N)

# use reduce to accumulate on the results generated by each digit
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        if not digits:
            return []
            
        keypad = {"2": "abc", "3": "def", "4": "ghi", "5": "jkl", "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
        return reduce(lambda accumulation, digit: [x + y for x in accumulation for y in keypad[digit]], digits, [''])


# Time: O(4^N)
# Space: O(N)
# use recursion to get combinations of all but last characters and last character
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        if not digits:
            return []
            
        keypad = {"2": "abc", "3": "def", "4": "ghi", "5": "jkl", "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
        return [a + b for a in self.letterCombinations(digits[:-1]) # not loop if only one digit
                      for b in self.letterCombinations(digits[-1])] or list(keypad[digits]) # get letter for one digit
